<?php

namespace Fabiang\DoctrineDynamic\Listener;

use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;
use Fabiang\DoctrineDynamic\ProxyDriver;
use Laminas\Mvc\MvcEvent;
use Laminas\Mvc\ApplicationInterface;
use Laminas\ServiceManager\ServiceManager;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-05 at 14:16:50.
 *
 * @coversDefaultClass Fabiang\DoctrineDynamic\Listener\RegisterProxyDriverListener
 */
final class RegisterProxyDriverListenerTest extends TestCase
{

    use ProphecyTrait;

    /**
     * @var RegisterProxyDriverListener
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new RegisterProxyDriverListener;
    }

    /**
     * @covers ::onBootstrap
     */
    public function testOnBootstrap()
    {
        $serviceManager = $this->prophesize(ServiceManager::class);
        $serviceManager->get(ProxyDriver::class)
            ->shouldBeCalled()
            ->willReturn(['foo' => 'bar']);
        $serviceManager->setService(
                'fabiang-doctrinedynamic-proxies',
                ['foo' => 'bar']
            )
            ->shouldBeCalled();

        $application = $this->prophesize(ApplicationInterface::class);
        $application->getServiceManager()->willReturn($serviceManager->reveal());

        $mvcEvent = $this->prophesize(MvcEvent::class);
        $mvcEvent->getApplication()->willReturn($application->reveal());

        $this->object->onBootstrap($mvcEvent->reveal());
    }

}
