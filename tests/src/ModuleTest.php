<?php

declare(strict_types=1);

namespace Fabiang\DoctrineDynamic;

use Laminas\EventManager\EventManager;
use Laminas\EventManager\SharedEventManagerInterface;
use Laminas\ModuleManager\ModuleManagerInterface;
use Laminas\Mvc\Application;
use Laminas\Mvc\MvcEvent;
use PHPUnit\Framework\TestCase;
use Prophecy\Argument;
use Prophecy\PhpUnit\ProphecyTrait;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-05 at 13:59:46.
 *
 * @coversDefaultClass Fabiang\DoctrineDynamic\Module
 */
final class ModuleTest extends TestCase
{
    use ProphecyTrait;

    /** @var Module */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Module();
    }

    /**
     * @covers ::init
     */
    public function testInit()
    {
        $sharedEventManager = $this->prophesize(
            SharedEventManagerInterface::class
        );

        $sharedEventManager->attach(
            Application::class,
            MvcEvent::EVENT_BOOTSTRAP,
            Argument::that(function (callable $callback) {
                    [$obj, $method] = $callback;
                    return $obj instanceof Listener\RegisterProxyDriverListener && $method === 'onBootstrap';
            })
        )
            ->shouldBeCalled();

        $eventManager = $this->prophesize(EventManager::class);
        $eventManager->getSharedManager()->willReturn($sharedEventManager->reveal());

        $moduleManager = $this->prophesize(ModuleManagerInterface::class);
        $moduleManager->getEventManager()->willReturn($eventManager->reveal());

        $this->object->init($moduleManager->reveal());
    }

    /**
     * @covers ::getConfig
     */
    public function testGetConfig()
    {
        $config = $this->object->getConfig();
        $this->assertIsArray($config);
        $this->assertArrayHasKey('doctrine_dynamic', $config);
        $this->assertIsArray($config['doctrine_dynamic']);

        $this->assertArrayHasKey('service_manager', $config);
        $this->assertIsArray($config['service_manager']);

        $this->assertSame(
            [
                'factories' => [
                    Configuration::class => Service\ConfigurationFactory::class,
                    ProxyDriver::class   => Service\ProxyDriverFactory::class,
                ],
            ],
            $config['service_manager']
        );
    }
}
